---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Main from '../components/Main.astro';
import Projects from '../components/Projects.astro';
import Skills from '../components/Skills.astro';
import Contact from '../components/Contact.astro';
---

<Layout title="Portafolio BG">
	<Header />
	<Main />
	<Projects />
	<Skills />
	<Contact />
	<!-- Elemento para el cursor personalizado -->
	<div class="mouse-cursor-container">
		<div class="cursor-dot"></div>
		<div class="cursor-outline"></div>
	  </div>
</Layout>


  
  <style>
	.mouse-cursor-container {
	  position: fixed;
	  pointer-events: none;
	  z-index: 9999;
	}
	
	.cursor-dot {
	  position: fixed;
	  width: 8px;
	  height: 8px;
	  background-color: #38bdf8;
	  border-radius: 50%;
	  transform: translate(-50%, -50%);
	  transition: opacity 0.15s ease-in-out, transform 0.15s ease-in-out;
	}
	
	.cursor-outline {
	  position: fixed;
	  width: 40px;
	  height: 40px;
	  border: 2px solid rgba(56, 189, 248, 0.5);
	  border-radius: 50%;
	  transform: translate(-50%, -50%);
	  transition: width 0.2s ease-in-out, height 0.2s ease-in-out, border-color 0.2s ease-in-out, transform 0.2s ease-in-out, background-color 0.2s ease-in-out;
	}
	
	/* Estilos para enlaces y botones */
	a:hover ~ .mouse-cursor-container .cursor-outline,
	button:hover ~ .mouse-cursor-container .cursor-outline {
	  width: 60px;
	  height: 60px;
	  border-color: rgba(56, 189, 248, 0.8);
	}
	
	/* Clases para los estados de clic */
	.cursor-clicked {
	  transform: translate(-50%, -50%) scale(0.7) !important;
	}
	
	.outline-clicked {
	  transform: translate(-50%, -50%) scale(1.4) !important;
	  background-color: rgba(56, 189, 248, 0.1) !important;
	}
  </style>
  
  <script>
	document.addEventListener('DOMContentLoaded', () => {
	  const cursorDot = document.querySelector('.cursor-dot');
	  const cursorOutline = document.querySelector('.cursor-outline');
	  
	  // Variables para posición actual y objetivo
	  let mouseX = 0;
	  let mouseY = 0;
	  let outlineX = 0;
	  let outlineY = 0;
	  let dotX = 0;
	  let dotY = 0;
	  
	  // Velocidad de seguimiento (valores más bajos = más suave)
	  const dotSpeed = 1;
	  const outlineSpeed = 0.15;
	  
	  // Detectar movimiento del mouse
	  document.addEventListener('mousemove', (e) => {
		mouseX = e.clientX;
		mouseY = e.clientY;
	  });
	  
	  // Manejo de clic
	  document.addEventListener('mousedown', () => {
		cursorDot.classList.add('cursor-clicked');
		cursorOutline.classList.add('outline-clicked');
	  });
	  
	  document.addEventListener('mouseup', () => {
		cursorDot.classList.remove('cursor-clicked');
		cursorOutline.classList.remove('outline-clicked');
	  });
	  
	  // Ocultar cursor en caso de inactividad
	  let mouseTimer;
	  document.addEventListener('mousemove', () => {
		clearTimeout(mouseTimer);
		cursorDot.style.opacity = 1;
		cursorOutline.style.opacity = 1;
		
		mouseTimer = setTimeout(() => {
		  cursorDot.style.opacity = 0;
		  cursorOutline.style.opacity = 0;
		}, 5000); // Ocultar después de 5 segundos de inactividad
	  });
	  
	  // Detectar cuando el cursor sale de la ventana
	  document.addEventListener('mouseout', (e) => {
		if (e.relatedTarget === null) {
		  cursorDot.style.opacity = 0;
		  cursorOutline.style.opacity = 0;
		}
	  });
	  
	  // Detectar cuando el cursor entra en la ventana
	  document.addEventListener('mouseover', () => {
		cursorDot.style.opacity = 1;
		cursorOutline.style.opacity = 1;
	  });
	  
	  // Función de animación fluida
	  function animateCursor() {
		// Movimiento suave del punto
		dotX += (mouseX - dotX) * dotSpeed;
		dotY += (mouseY - dotY) * dotSpeed;
		
		// Movimiento más lento del contorno
		outlineX += (mouseX - outlineX) * outlineSpeed;
		outlineY += (mouseY - outlineY) * outlineSpeed;
		
		// Aplicar transformaciones
		cursorDot.style.left = `${dotX}px`;
		cursorDot.style.top = `${dotY}px`;
		
		cursorOutline.style.left = `${outlineX}px`;
		cursorOutline.style.top = `${outlineY}px`;
		
		// Continuar la animación
		requestAnimationFrame(animateCursor);
	  }
	  
	  // Iniciar animación
	  animateCursor();
	  
	  // Agregar clase hover a elementos interactivos
	  const interactiveElements = document.querySelectorAll('a, button, input, textarea, select, .interactive');
	  interactiveElements.forEach(element => {
		element.addEventListener('mouseenter', () => {
		  cursorDot.classList.add('cursor-hover');
		  cursorOutline.classList.add('cursor-hover');
		});
		
		element.addEventListener('mouseleave', () => {
		  cursorDot.classList.remove('cursor-hover');
		  cursorOutline.classList.remove('cursor-hover');
		});
	  });
	});
  </script>